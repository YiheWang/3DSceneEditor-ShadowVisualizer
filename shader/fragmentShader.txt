#version 330

in vec4 vColor;
in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;
in vec4 DirectionalLightSpacePos;

out vec4 outColor;
uniform vec3 color;

struct Light{
	vec3 lightColor;
	float ambientIntensity;
	float diffuseIntensity;
};

struct PointLight{
    Light light;
    vec3 lightPosition;
};

struct DirectionalLight{
	Light light;
	vec3 lightDirection;
};

struct Material{
	float specularIntensity;
	float shininess;
};

uniform PointLight pointLight;
uniform DirectionalLight directionalLight;
uniform Material material;

uniform sampler2D theTexture; // TEXTURE0
uniform sampler2D directionalShadowMap; //TEXTURE1

uniform vec3 cameraPosition;

float calcDirectionalShadowMapFactor(DirectionalLight light)
{
    vec3 projectedCoords = DirectionalLightSpacePos.xyz / DirectionalLightSpacePos.w;
    //in vertex shader, gl_position automatically did this for us
    projectedCoords = (projectedCoords * 0.5) + 0.5;
    // change range from -1, 1 to 0, 1

    float closestDepth = texture(directionalShadowMap, projectedCoords.xy).r;
    float currentDepth = projectedCoords.z;

    vec3 normal = normalize(Normal);
    vec3 lightDirection = normalize(light.lightDirection);
    float bias = max(0.005 * (1.0 - dot(normal, lightDirection)), 0.001);
    // remove the shadow acne

    float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
    if(projectedCoords.z > 1.0){
        shadow = 0.0f;
    }

    return shadow;
}

vec4 calcLightByDirection(Light light, vec3 direction, float shadowFactor){
	vec4 ambientColor = vec4(light.lightColor, 1.0f) * light.ambientIntensity;

	float diffuseFactor = max(dot(normalize(Normal), normalize(direction)), 0.0f);
	vec4 diffuseColor = vec4(light.lightColor * light.diffuseIntensity * diffuseFactor, 1.0f);

	vec4 specularColor = vec4(0, 0, 0, 0);

	if(diffuseFactor > 0.0f)
	{
		vec3 cameraToFrag = normalize(cameraPosition - FragPos);
		vec3 reflectedVertex = normalize(reflect(-direction, normalize(Normal)));

		float specularFactor = max(dot(cameraToFrag, reflectedVertex), 0.0f);
		specularFactor = pow(specularFactor, material.shininess);
		specularColor = vec4(light.lightColor * material.specularIntensity * specularFactor, 1.0f);
	}

	return (ambientColor + (1 - shadowFactor) * (diffuseColor + specularColor));
}

vec4 calcPointLight(){
	vec3 direction = pointLight.lightPosition - FragPos;
	// point from fragment to light source
	direction = normalize(direction);

	vec4 color = calcLightByDirection(pointLight.light, direction, 0.0f);
	return color;
}

vec4 calcDirectionalLight(){
    float shadowFactor = calcDirectionalShadowMapFactor(directionalLight);
	return calcLightByDirection(directionalLight.light, normalize(-directionalLight.lightDirection), shadowFactor);
	//return calcLightByDirection(directionalLight.light, normalize(-directionalLight.lightDirection), 0.0f);
	//from fragment to light source
}

void main()
{
    vec4 finalColor = calcPointLight();
    finalColor += calcDirectionalLight();
    //vec4 finalColor = calcDirectionalLight();
    if(texture(theTexture, TexCoord).rgb == vec3(0.0f)){
        outColor = vColor * vec4(color, 1.0f) * finalColor;
    } // when we disable texture
    else {
        outColor = vColor * vec4(color, 1.0f) * texture(theTexture, TexCoord) * finalColor;
    }

    /*if(ifUsingTexture == 1){
        outColor = vColor * vec4(color, 1.0f) * texture(theTexture, TexCoord) * finalColor;
    }
    else if(ifUsingTexture == 0){
        outColor = vColor * vec4(color, 1.0f) * finalColor;
    }*/

    // this represents vertex color * uniform color * texture color * light color
}